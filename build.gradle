/**
 *
 */
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:' + pitestPluginVersion
    classpath 'org.asciidoctor:asciidoctorj-epub3:' + asciidoctorjEpub3Version
    classpath 'org.asciidoctor:asciidoctorj-pdf:' + asciidoctorjPdfVersion
    classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.5'
  }
}

/**
 *
 */
plugins {
  id 'org.asciidoctor.convert' version "1.5.2"
  id 'org.kordamp.gradle.livereload' version "0.2.1"
}

/**
 * @see http://www.gradle.org/docs/current/userguide/groovy_plugin.html
 */
apply plugin: 'groovy'

/**
 * @see http://www.gradle.org/docs/current/userguide/application_plugin.html
 */
apply plugin: 'application'

/**
 *
 */
apply plugin: 'org.asciidoctor.convert'

/**
 *
 */
apply plugin: 'org.kordamp.gradle.livereload'

/**
 *
 */
apply plugin: 'com.github.jruby-gradle.base'

/**
 *
 */
apply from: 'gradle/codenarc.gradle'

/**
 *
 */
apply from: 'gradle/pitest.gradle'

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

version             = appVersion
mainClassName       = 'app.Main'
sourceCompatibility = 1.8
group               = 'insurun'

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
task wrapper(type: Wrapper) {
  gradleVersion = gradleVersion
}

asciidoctorj {
  version = asciidoctorJVersion
}

asciidoctor {
  backends    'html5','pdf', 'epub3'
  attributes 'build-gradle': file('build.gradle'),
    'sourcedir': project.sourceSets.main.groovy.srcDirs[0],
    'endpoint-url': 'https://mysite.com',
    'source-highlighter' : 'coderay',
    'imagesdir': './images',
    'toc':'left',
    'icons': 'font',
    'setanchors':'true',
    'idprefix':'',
    'idseparator':'-',
    'docinfo1':'true'

  dependsOn jrubyPrepareGems

  requires = ['asciidoctor-diagram']

  gemPath = jrubyPrepareGems.outputDir
}

liveReload {
  docRoot asciidoctor.outputDir.canonicalPath
}

/**
 *
 */
repositories {
  mavenCentral()

  /*
  maven {
    name 'sonatype-repository'
    url 'http://oss.sonatype.org/content/repositories/snapshots/'
  }


  // Amazon S3 Repo
  // See: https://docs.gradle.org/current/release-notes
  maven {
    url "s3://someS3Bucket/maven2"
    credentials(AwsCredentials) {
      accessKey "someKey"
      secretKey "someSecret"
    }
  }

  ivy {
    url "s3://someS3Bucket/ivy"
    credentials(AwsCredentials) {
      accessKey "someKey"
      secretKey "someSecret"
    }
  }
  */
}

/**
 *
 */
configurations {
  groovyDoc
  provided
  compile.extendsFrom provided
}

/**
 *
 */
run {
  ignoreExitValue = true
  if(project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

/**
 *
 */
groovydoc {
  groovyClasspath = configurations.groovyDoc
  destinationDir  = new File("${project.projectDir}/docs")
  docTitle        = appName
  header          = ""
  footer          = ""
  //windowTitle   = ""
}

/**
 *
 */
dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  // This will not be included in the Jar distro
  // provided "org.codehaus.groovy:groovy-all:${groovyVersion}"

  compile "org.codehaus.groovy:groovy-all:${groovyVersion}", {
    exclude group: 'asm', module: 'asm-commons'
    exclude group: 'asm', module: 'asm-tree'
    exclude group: 'asm', module: 'asm-util'
    exclude group: 'asm', module: 'asm-analysis'
  }

  compile "org.slf4j:slf4j-api:1.7.21"
  runtime "ch.qos.logback:logback-classic:1.1.8"

  gems 'rubygems:asciidoctor-diagram:1.2.0'

  groovyDoc "org.codehaus.groovy:groovy-groovydoc:${groovyVersion}"
  groovyDoc "org.codehaus.groovy:groovy-ant:${groovyVersion}"
  testCompile "org.spockframework:spock-core:${spockCoreVersion}"
}

/**
 *
 */
task buildJar(type: Jar, dependsOn: [test, jar]) {
  from(
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  ) {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    //exclude 'META-INF/MANIFEST.MF'
  }
  with jar
  manifest {
    attributes(
      'Main-Class': mainClassName,
    )
  }
}

/**
 *
 */
task fatJar(type: Jar, dependsOn: [test, jar]) {
  from files(sourceSets.main.output.classesDir)
  from(
    // Don't include provided configurations
    (configurations.compile - configurations.provided).collect {
      it.isDirectory() ? it : zipTree(it) }
  ) {
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
  }
  with jar
  manifest {
    attributes(
      'Main-Class': mainClassName,
    )
  }
}

/**
 *
 */
task dist(dependsOn: fatJar, type: Copy) {
  from ("${buildDir}/${libsDirName}")
  into ("./dist")
  include(project.name + '-' + project.version + '.jar')
}
