/**
 * @see http://www.gradle.org/docs/current/userguide/groovy_plugin.html
 */
apply plugin: 'groovy'

/**
 * @see http://www.gradle.org/docs/current/userguide/application_plugin.html
 */
apply plugin: 'application'

/**
 * @see http://www.gradle.org/docs/current/userguide/codenarc_plugin.html
 */
apply plugin: 'codenarc'

/**
 * @see http://gradle-pitest-plugin.solidsoft.info/
 */
apply plugin: "info.solidsoft.pitest"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

version       = '0.1.0'
mainClassName = 'app.Main'

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
codenarc {
  configFile = new File("${project.projectDir}/codenarc-ruleset.groovy")
}

/**
 * @see http://mrhaki.blogspot.com/2011/01/gradle-goodness-dont-let-codenarc.html
 */
//[codenarcMain, codenarcTest]*.ignoreFailures = true

buildscript {
  repositories {
      mavenCentral()
      //Needed only for SNAPSHOT versions
      //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
  }
  dependencies {
      classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.4'
  }
}

/**
 *
 */
repositories {
  mavenCentral()
}

/**
 *
 */
sourceSets {
  main {
    groovy {
      srcDirs = ['src']
    }
  }
  test {
    groovy {
      srcDirs = ['test']
    }
  }
}

/**
 *
 */
configurations {
  groovyDoc
}

/**
 * TODO: Implement me
 */
run {
  ignoreExitValue = true
  if(project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

/**
 *
 */
groovydoc {
  groovyClasspath = configurations.groovyDoc
  destinationDir  = new File("${project.projectDir}/docs")
  docTitle        = "App"
  header          = ""
  footer          = ""
  //windowTitle   = ""
}

pitest {
  targetClasses       = ['app.*']  //by default "${project.group}.*"
  //pitestVersion     = "1.1.4" //not needed when a default PIT version should be used
  threads             = 4
  outputFormats       = ['XML', 'HTML']
  failWhenNoMutations = false
  //testSourceSets    = [sourceSets.test]
  //mainSourceSets    = [sourceSets.main]
  //jvmArgs           = ['-Xmx1024m']
}

/**
 *
 */
dependencies {
  def groovyVersion = '2.4.3'

  compile fileTree(dir: 'libs', include: ['*.jar'])

  compile   "org.codehaus.groovy:groovy-all:${groovyVersion}"
  groovyDoc "org.codehaus.groovy:groovy-groovydoc:${groovyVersion}"
  groovyDoc "org.codehaus.groovy:groovy-ant:${groovyVersion}"

  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

/**
 *
 */
task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}

/**
 *
 */
task buildJar(type: Jar, dependsOn: [test, jar]) {
  from(
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  ) {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    //exclude 'META-INF/MANIFEST.MF'
  }
  with jar
  manifest {
    attributes(
      'Main-Class': mainClassName,
    )
  }
}

/**
 *
 */
task fatJar(type: Jar, dependsOn: [test, jar]) {
  from files(sourceSets.main.output.classesDir)
  from(
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  ) {
    exclude 'META-INF/MANIFEST.MF'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
  }
  with jar
  manifest {
    attributes(
      'Main-Class': mainClassName,
    )
  }
}

/**
 *
 */
task dist(dependsOn: fatJar, type: Copy) {
  from ("${buildDir}/${libsDirName}")
  into ("./dist")
  include(project.name + '-' + project.version + '.jar')
}
