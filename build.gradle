/**
 * @see http://www.gradle.org/docs/current/userguide/groovy_plugin.html
 */
apply plugin: 'groovy'

/**
 * @see http://www.gradle.org/docs/current/userguide/application_plugin.html
 */
apply plugin: 'application'

/**
 * @see http://www.gradle.org/docs/current/userguide/codenarc_plugin.html
 */
apply plugin: 'codenarc'

/**
 *
 */
codenarc {
  configFile = new File("${project.projectDir}/codenarc-ruleset.groovy")
}

/**
 * @see http://mrhaki.blogspot.com/2011/01/gradle-goodness-dont-let-codenarc.html
 */
//[codenarcMain, codenarcTest]*.ignoreFailures = true

mainClassName = "app.Main"

/**
 *
 */
repositories {
  mavenCentral()
}

/**
 *
 */
sourceSets {
  main {
    groovy {
      srcDirs = ['src']
    }
  }
  test {
    groovy {
      srcDirs = ['test']
    }
  }
}

/**
 *
 */
configurations {
  groovyDoc
}

/**
 * TODO: Implement me
 */
run {
  ignoreExitValue = true
  if(project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

/**
 *
 */
groovydoc {
  groovyClasspath = configurations.groovyDoc
  destinationDir = new File("${project.projectDir}/docs")
  docTitle = "App"
  header = ""
  footer = ""
  //windowTitle = ""
}

/**
 *
 */
dependencies {
  def groovyVersion = "2.4.1"
  compile   "org.codehaus.groovy:groovy-all:${groovyVersion}"
  groovyDoc "org.codehaus.groovy:groovy-groovydoc:${groovyVersion}"
  groovyDoc "org.codehaus.groovy:groovy-ant:${groovyVersion}"

  testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
}

/**
 *
 */
task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}

/**
 *
 */
def getVersionName (useGit=false)
{
  def suffix = ""
  if (useGit) {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine "git", "rev-list", "HEAD"
      standardOutput = stdout
      ignoreExitValue = true
    }
    suffix = '-r' + stdout.toString().split("\n")?.size()
  }
  project.name + suffix
}

/**
 *
 */
task buildJar(type: Jar, dependsOn: [test, jar]) {
  baseName = getVersionName()
  from(
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  ) {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    //exclude 'META-INF/MANIFEST.MF'
  }
  with jar
  manifest {
    attributes(
      'Main-Class': mainClassName,
    )
  }
}

/**
 *
 */
task dist(dependsOn: buildJar, type: Copy) {
  from ("${buildDir}/${libsDirName}")
  into ("./dist")
  include(getVersionName() + ".jar")
}
